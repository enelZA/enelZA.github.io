<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
  <title>EnelZA </title>
  <link>http://enelza.github.io/</link>
  <description>Programming, Linux and life.</description>
  <generator>BlazeBlogger 1.2.0</generator>
  <item>
    <title>Test Cron Job scripts</title>
    <link>http://enelza.github.io/2014/01/4-test-cron-job-scripts/</link>
    <guid>http://enelza.github.io/2014/01/4-test-cron-job-scripts/</guid>
    <pubDate>Mon, 27 Jan 2014 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Scheduled cron jobs can be hard to get right especially if the the cron job calls another script. 
The scheduled script should no output anything to standard out and the script is triggered by a new instance of  /bin/sh</p>

<p>In order to test your scheduled script in the same way as cron will run it, issue the following command.</p>

<pre><code>  /bin/sh -c "(
  export PATH=/usr/bin:/bin;
  /home/user/cron/scriptname.sh
   &lt;/dev/null)"
</code></pre>

<p>It simulates a cron execution of the scriptname.sh script.</p>
    ]]></description>
  </item>
  <item>
    <title>Terminal "Google define:" functionality</title>
    <link>http://enelza.github.io/2013/10/3-terminal-google-define-functionality/</link>
    <guid>http://enelza.github.io/2013/10/3-terminal-google-define-functionality/</guid>
    <pubDate>Sun, 27 Oct 2013 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Google have the nifty option to help you with word definitions and spelling.</p>

<p>Type define:exagency into the Google search bar.</p>

<p><img src="img/b3_2.jpg" alt="Google define functionality" title=""></p>

<p>It will give the the meaning of the word. </p>

<p>If you misspelled, Google will suggest the correct spelling.</p>

<p><img src="img/b3_1.jpg" alt="Google define functionality" title=""></p>

<p>I use this functionality on a daily basis, because I always have a browser window open somewhere on my desktop. </p>

<p>Sometimes you are offline, visiting the <a href="http://en.wikipedia.org/wiki/Kruger_National_Park">Kruger National Park</a> in South Africa, and your Google spell check habit will not suffice. The solution, <a href="http://aspell.net/">Gnu aspell</a> and <a href="http://aiksaurus.sourceforge.net/">aiksaurus</a> wrapped in a bash script.</p>

<h2>The script:</h2>

<pre><code>define() {
## check dependencies
hash aspell 2&gt;/dev/null || { printf &gt;&amp;2 "This script require Aspell but, it's not installed.
\nUse 'Apt-get install aspell'\n"; return; }
hash aiksaurus 2&gt;/dev/null || { printf &gt;&amp;2 "This script require aiksaurus, but it's not installed.
\nUse 'Apt-get install aiksaurus'\n"; return; }

check=$(echo "$1" | aspell -a | cut -d "*" -f2)
if [[ $check == *,* ]]
then
check=$(echo "$1" | aspell -a | cut -d "&amp;" -f2)
check2=$(echo $check | cut -d ":" -f2)
arrIN=(${check2/,/ })
for i in "${arrIN[@]}"; do
    echo -e " \e[1;31m$i\e[0m"
done
else
echo -e " \e[1;33m$1\e[0m"
aiksaurus $1
fi
}
</code></pre>

<h2>Usage</h2>

<p>Add the script to your ~/.bashrc file and use the define() function with the word you want to look up as the only parameter.</p>

<p><img src="img/b3_3.jpg" alt="Function output" title=""></p>
    ]]></description>
  </item>
  <item>
    <title>Use ImageMagick to add a border to an image.</title>
    <link>http://enelza.github.io/2013/10/2-use-imagemagick-to-add-a-border-to-an-image/</link>
    <guid>http://enelza.github.io/2013/10/2-use-imagemagick-to-add-a-border-to-an-image/</guid>
    <pubDate>Wed, 02 Oct 2013 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Imagemagick is the Swiss army knive for command line image tools. </p>

<p>Install the imagemagick suite via ap-get:</p>

<pre><code>apt-get install imagemagick
</code></pre>

<p>Once installed, you can add a border to an image with the following command. (Command should be entered as a slingle line)</p>

<pre><code>convert img.jpg -bordercolor white -border 13 
\( +clone -background black -shadow 80x3+2+2 \) 
+swap -background white -layers merge +repage img.jpg
</code></pre>

<p>I have used the following image as the source image.</p>

<p><img src="img/b2.jpg" alt="Sample input image" title=""></p>

<p>and the output will look like this</p>

<p><img src="img/b2_1.jpg" alt="Sample output image" title=""></p>

<p>The sample <a href="http://commons.wikimedia.org/wiki/File:D%C3%BClmen,_Naturschutzgebiet_-Am_Enteborn-_--_2014_--_0202.jpg#mediaviewer/File:D%C3%BClmen,_Naturschutzgebiet_-Am_Enteborn-_--_2014_--_0202.jpg">
Image</a> was obtained via <a href="http://commons.wikimedia.org/wiki/">Wikimedia Commons</a>
and is the original work of Â© <a href="http://commons.wikimedia.org/wiki/User:XRay" title="User:XRay">Dietmar Rabich</a>, 
<a rel="nofollow" class="external text" href="http://www.rabich.de/">rabich.de</a>,  licensed under <a title="Creative Commons Attribution-Share Alike 4.0" href="http://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0</a>.</p>
    ]]></description>
  </item>
  <item>
    <title>Blogging from the command line</title>
    <link>http://enelza.github.io/2013/09/1-blogging-from-the-command-line/</link>
    <guid>http://enelza.github.io/2013/09/1-blogging-from-the-command-line/</guid>
    <pubDate>Fri, 27 Sep 2013 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>This tutorial will demonstrate how to setup a static blog using <a href="http://blaze.blackened.cz">BlazeBlogger</a> as the blog template engine.</p>

<h3>Prerequisites and assumptions</h3>

<ol>
<li>This tutorial make use of the apt-get package manager on Debian based Linux distros, please substitute with your favourite package installer.</li>
<li>In order to keep things simple, I've used nano as the default text editor in this tutorial </li>
</ol>

<h3>Install BlazeBlogger</h3>

<p>From your Linux command line, execute the following command</p>

<pre><code>sudo apt-get install blazeblogger
</code></pre>

<h3>Create and configure your blog</h3>

<p>Create a new folder that will contain your blog html files. For this example I will create a folder called <em>mynewblog</em> in my Home folder.</p>

<pre><code>mkdir ~/mynewblog
</code></pre>

<p>Make sure you are in the newly created folder.</p>

<pre><code>cd ~/mynewblog
</code></pre>

<p>The next step is to initialize a new blog container by typing the following command in your blog folder.</p>

<pre><code>blaze-init
</code></pre>

<p>This will create a hidden folder called <strong>.blaze</strong>. This folder contains the configuration settings for your blog.
Edit and change the configuration file. </p>

<pre><code>nano ~/mynewblog/.blaze/config
</code></pre>

<p>Change the title, subtitle description and keywords settings to match your blog.</p>

<p><img src="img/b1.jpg" alt="Config screen shot 1" title=""></p>

<p>Now change the name and email address</p>

<p><img src="img/b1_1.jpg" alt="Config screen shot 1" title=""></p>

<p>Press the Control and o key and then Enter to save the config file. 
Press Control and x to exit.</p>

<h3>Create your first blog entry</h3>

<p>BlazeBlogger ships with a command called blaze-add, enter the command and create your first blog entry, press Control and x to save and exit the nano text editor.</p>

<p><img src="img/b1_2.jpg" alt="Config screen shot 2" title=""></p>

<p>The blaze-make command will create your website and add the blog entry. It will create your landing page called "index.html". </p>

<p>Here is the output of index.html.</p>

<p><img src="img/b1_3.jpg" alt="Config screen shot 2" title=""></p>
    ]]></description>
  </item>
</channel>
</rss>