<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
  <title>EnelZA </title>
  <link>http://enelza.github.io/</link>
  <description>Programming, Linux and life.</description>
  <generator>BlazeBlogger 1.2.0</generator>
  <item>
    <title>All the different linux log files</title>
    <link>http://enelza.github.io/2015/04/8-all-the-different-linux-log-files/</link>
    <guid>http://enelza.github.io/2015/04/8-all-the-different-linux-log-files/</guid>
    <pubDate>Wed, 22 Apr 2015 00:00:01 GMT</pubDate>
    <description><![CDATA[<ul>
<li><strong>var/log/messages</strong> Contains global system messages, including the messages that are logged during system startup. There are several things that are logged in /var/log/messages including mail, cron, daemon, kern, auth, etc.</li>
<li><strong>/var/log/dmesg</strong> Contains kernel ring buffer information. When the system boots up, it prints number of messages on the screen that displays information about the hardware devices that the kernel detects during boot process. These messages are available in kernel ring buffer and whenever the new message comes the old message gets overwritten. You can also view the content of this file using the dmesg command.</li>
<li><strong>/var/log/auth.log</strong>  Contains system authorization information, including user logins and authentication machinsm that were used.</li>
<li><strong>/var/log/boot.log</strong>  Contains information that are logged when the system boots</li>
<li><strong>/var/log/daemon.log</strong> ontains information logged by the various background daemons that runs on the system</li>
<li><strong>/var/log/dpkg.log</strong> ontains information that are logged when a package is installed or removed using dpkg command</li>
<li><strong>/var/log/kern.log</strong>Contains information logged by the kernel. Helpful for you to troubleshoot a custom-built kernel.</li>
<li><strong>/var/log/lastlog</strong> Displays the recent login information for all the users. This is not an ascii file. You should use lastlog command to view the content of this file.</li>
<li><strong>/var/log/maillog/var/log/mail.log</strong>  Contains the log information from the mail server that is running on the system. For example, sendmail logs information about all the sent items to this file</li>
<li><strong>/var/log/user.log</strong>  Contains information about all user level logs</li>
<li><strong>/var/log/Xorg.x.log</strong>  Log messages from the X</li>
<li><strong>/var/log/alternatives.log</strong>  Information by the update-alternatives are logged into this log file. On Ubuntu, update-alternatives maintains symbolic links determining def ault commands.</li>
<li><strong>/var/log/btmp</strong> (lastb command; shows all bad login attempts) /var/log/wtmp (displays all users logged in and out since the file is created...last command;login attempts)– This file contains information about failed login attemps. Use the last command to view the btmp file. For example, “last -f /var/log/btmp | more”</li>
<li><strong>/var/log/cups</strong> All printer and printing related log messages</li>
<li><strong>/var/log/anaconda.log</strong>  When you install Linux, all installation related messages are stored in this log file</li>
<li><strong>/var/log/yum.log</strong>  Contains information that are logged when a package is installed using yum</li>
<li><strong>/var/log/cron</strong> Whenever cron daemon(or anacron) starts a cron job, it logs the information about the cron job in this file</li>
<li><strong>/var/log/secure</strong> Contains information related to authentication and authorization privileges. For example, sshd logs all the messages here, including unsuccessful login.</li>
<li><strong>/var/log/wtmp or /var/log/utmp</strong> Contains login records. Using wtmp you can find out who is logged into the system. who command uses this file to display the information.</li>
<li><strong>/var/log/faillog</strong> Contains user failed login attemps. Use faillog command to display the content of this file.
Apart from the above log files, /var/log directory may also contain the following sub-directories depending on the application that is running on your system.</li>
<li><strong>/var/log/httpd/ (or) /var/log/apache2</strong> Contains the apache web server access<em>log and error</em>log</li>
<li><strong>/var/log/lighttpd/</strong> Contains light HTTPD access<em>log and error</em>log</li>
<li><strong>/var/log/conman/</strong> Log files for ConMan client. conman connects remote consoles that are managed by conmand daemon.</li>
<li><strong>/var/log/mail/</strong> This subdirectory contains additional logs from your mail server. For example, sendmail stores the collected mail statistics in /var/log/mail/statistics file</li>
<li><strong>/var/log/prelink/</strong> prelink program modifies shared libraries and linked binaries to speed up the startup process.</li>
<li><strong>/var/log/prelink/prelink.log</strong> contains the information about the .so file that was modified by the prelink.</li>
<li><strong>/var/log/audit/</strong> Contains logs information stored by the Linux audit daemon (auditd).</li>
<li><strong>/var/log/setroubleshoot/</strong> SELinux uses setroubleshootd (SE Trouble Shoot Daemon) to notify about issues in the security context of files, and logs those information in this log file.</li>
<li><strong>/var/log/samba/</strong> Contains log information stored by samba, which is used to connect Windows to Linux.</li>
<li><strong>/var/log/sa/</strong> Contains the daily sar files that are collected by the sysstat package.</li>
<li><strong>/var/log/sssd/</strong> Use by system security services daemon that manage access to remote directories and authentication mechanisms.</li>
</ul>
    ]]></description>
  </item>
  <item>
    <title>Clean out a white board photo</title>
    <link>http://enelza.github.io/2014/05/9-clean-out-a-white-board-photo/</link>
    <guid>http://enelza.github.io/2014/05/9-clean-out-a-white-board-photo/</guid>
    <pubDate>Thu, 22 May 2014 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Use the following imagemagick convert script</p>

<pre><code>#!/bin/bash
convert $1 -morphology Convolve DoG:15,100,0
-negate -normalize -blur 0x1
-channel RBG -level 60%,91%,0.1 $2
</code></pre>

<p>Before photo</p>

<p><img src="img/b9_1.jpg" alt="Before photo" title=""></p>

<p>After Photo</p>

<p><img src="img/b9_2.jpg" alt="After Photo" title=""></p>
    ]]></description>
  </item>
  <item>
    <title>Create a PDF calendar for printing</title>
    <link>http://enelza.github.io/2014/03/7-create-a-pdf-calendar-for-printing/</link>
    <guid>http://enelza.github.io/2014/03/7-create-a-pdf-calendar-for-printing/</guid>
    <pubDate>Mon, 03 Mar 2014 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Install via apt-get</p>

<pre><code>apt-get install pcal
</code></pre>

<p>Use pcal to print a range of monthly calendars</p>

<pre><code>pcal -o April.ps 4 2015 3
</code></pre>

<p>Will print from month 4, three months into the future.</p>

<p>April, May and June</p>
    ]]></description>
  </item>
  <item>
    <title>How to fix corrupted pdf documents</title>
    <link>http://enelza.github.io/2014/02/6-how-to-fix-corrupted-pdf-documents/</link>
    <guid>http://enelza.github.io/2014/02/6-how-to-fix-corrupted-pdf-documents/</guid>
    <pubDate>Tue, 25 Feb 2014 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Try to convert the pdf document back to postscript</p>

<pre><code>pdf2ps corupt.pdf recovered.ps &amp;&amp; psp2df recovered.ps recovered.pdf
</code></pre>

<p>If that does not work, try the pdf2cairo application</p>

<p>pdftocairo -pdf corupted.pdf new.pdf</p>
    ]]></description>
  </item>
  <item>
    <title>Colorize log files using ccze tool</title>
    <link>http://enelza.github.io/2014/02/5-colorize-log-files-using-ccze-tool/</link>
    <guid>http://enelza.github.io/2014/02/5-colorize-log-files-using-ccze-tool/</guid>
    <pubDate>Sat, 15 Feb 2014 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Install via apt-get</p>

<pre><code>    sudo apt-get install ccze -y
</code></pre>

<p>Display log files</p>

<pre><code>    tail /var/log/syslog | ccze -A
</code></pre>

<p>Export log files to color html</p>

<pre><code>   cat /var/log/syslog | ccze -h &gt; ~/Desktop/syslog.html
</code></pre>
    ]]></description>
  </item>
  <item>
    <title>Test Cron Job scripts</title>
    <link>http://enelza.github.io/2014/01/4-test-cron-job-scripts/</link>
    <guid>http://enelza.github.io/2014/01/4-test-cron-job-scripts/</guid>
    <pubDate>Mon, 27 Jan 2014 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Scheduled cron jobs can be hard to get right especially if the the cron job calls another script. 
The scheduled script should no output anything to standard out and the script is triggered by a new instance of  /bin/sh</p>

<p>In order to test your scheduled script in the same way as cron will run it, issue the following command.</p>

<pre><code>  /bin/sh -c "(
  export PATH=/usr/bin:/bin;
  /home/user/cron/scriptname.sh
   &lt;/dev/null)"
</code></pre>

<p>It simulates a cron execution of the scriptname.sh script.</p>
    ]]></description>
  </item>
  <item>
    <title>Terminal "Google define:" functionality</title>
    <link>http://enelza.github.io/2013/10/3-terminal-google-define-functionality/</link>
    <guid>http://enelza.github.io/2013/10/3-terminal-google-define-functionality/</guid>
    <pubDate>Sun, 27 Oct 2013 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Google have the nifty option to help you with word definitions and spelling.</p>

<p>Type define:exagency into the Google search bar.</p>

<p><img src="img/b3_2.jpg" alt="Google define functionality" title=""></p>

<p>It will give the the meaning of the word. </p>

<p>If you misspelled, Google will suggest the correct spelling.</p>

<p><img src="img/b3_1.jpg" alt="Google define functionality" title=""></p>

<p>I use this functionality on a daily basis, because I always have a browser window open somewhere on my desktop. </p>

<p>Sometimes you are offline, visiting the <a href="http://en.wikipedia.org/wiki/Kruger_National_Park">Kruger National Park</a> in South Africa, and your Google spell check habit will not suffice. The solution, <a href="http://aspell.net/">Gnu aspell</a> and <a href="http://aiksaurus.sourceforge.net/">aiksaurus</a> wrapped in a bash script.</p>

<h2>The script:</h2>

<pre><code>define() {
## check dependencies
hash aspell 2&gt;/dev/null || { printf &gt;&amp;2 "This script require Aspell but, it's not installed.
\nUse 'Apt-get install aspell'\n"; return; }
hash aiksaurus 2&gt;/dev/null || { printf &gt;&amp;2 "This script require aiksaurus, but it's not installed.
\nUse 'Apt-get install aiksaurus'\n"; return; }

check=$(echo "$1" | aspell -a | cut -d "*" -f2)
if [[ $check == *,* ]]
then
check=$(echo "$1" | aspell -a | cut -d "&amp;" -f2)
check2=$(echo $check | cut -d ":" -f2)
arrIN=(${check2/,/ })
for i in "${arrIN[@]}"; do
    echo -e " \e[1;31m$i\e[0m"
done
else
echo -e " \e[1;33m$1\e[0m"
aiksaurus $1
fi
}
</code></pre>

<h2>Usage</h2>

<p>Add the script to your ~/.bashrc file and use the define() function with the word you want to look up as the only parameter.</p>

<p><img src="img/b3_3.jpg" alt="Function output" title=""></p>
    ]]></description>
  </item>
  <item>
    <title>Use ImageMagick to add a border to an image.</title>
    <link>http://enelza.github.io/2013/10/2-use-imagemagick-to-add-a-border-to-an-image/</link>
    <guid>http://enelza.github.io/2013/10/2-use-imagemagick-to-add-a-border-to-an-image/</guid>
    <pubDate>Wed, 02 Oct 2013 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>Imagemagick is the Swiss army knive for command line image tools. </p>

<p>Install the imagemagick suite via ap-get:</p>

<pre><code>apt-get install imagemagick
</code></pre>

<p>Once installed, you can add a border to an image with the following command. (Command should be entered as a slingle line)</p>

<pre><code>convert img.jpg -bordercolor white -border 13 
\( +clone -background black -shadow 80x3+2+2 \) 
+swap -background white -layers merge +repage img.jpg
</code></pre>

<p>I have used the following image as the source image.</p>

<p><img src="img/b2.jpg" alt="Sample input image" title=""></p>

<p>and the output will look like this</p>

<p><img src="img/b2_1.jpg" alt="Sample output image" title=""></p>

<p>The sample <a href="http://commons.wikimedia.org/wiki/File:D%C3%BClmen,_Naturschutzgebiet_-Am_Enteborn-_--_2014_--_0202.jpg#mediaviewer/File:D%C3%BClmen,_Naturschutzgebiet_-Am_Enteborn-_--_2014_--_0202.jpg">
Image</a> was obtained via <a href="http://commons.wikimedia.org/wiki/">Wikimedia Commons</a>
and is the original work of © <a href="http://commons.wikimedia.org/wiki/User:XRay" title="User:XRay">Dietmar Rabich</a>, 
<a rel="nofollow" class="external text" href="http://www.rabich.de/">rabich.de</a>,  licensed under <a title="Creative Commons Attribution-Share Alike 4.0" href="http://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0</a>.</p>
    ]]></description>
  </item>
  <item>
    <title>Blogging from the command line</title>
    <link>http://enelza.github.io/2013/09/1-blogging-from-the-command-line/</link>
    <guid>http://enelza.github.io/2013/09/1-blogging-from-the-command-line/</guid>
    <pubDate>Fri, 27 Sep 2013 00:00:01 GMT</pubDate>
    <description><![CDATA[<p>This tutorial will demonstrate how to setup a static blog using <a href="http://blaze.blackened.cz">BlazeBlogger</a> as the blog template engine.</p>

<h3>Prerequisites and assumptions</h3>

<ol>
<li>This tutorial make use of the apt-get package manager on Debian based Linux distros, please substitute with your favourite package installer.</li>
<li>In order to keep things simple, I've used nano as the default text editor in this tutorial </li>
</ol>

<h3>Install BlazeBlogger</h3>

<p>From your Linux command line, execute the following command</p>

<pre><code>sudo apt-get install blazeblogger
</code></pre>

<h3>Create and configure your blog</h3>

<p>Create a new folder that will contain your blog html files. For this example I will create a folder called <em>mynewblog</em> in my Home folder.</p>

<pre><code>mkdir ~/mynewblog
</code></pre>

<p>Make sure you are in the newly created folder.</p>

<pre><code>cd ~/mynewblog
</code></pre>

<p>The next step is to initialize a new blog container by typing the following command in your blog folder.</p>

<pre><code>blaze-init
</code></pre>

<p>This will create a hidden folder called <strong>.blaze</strong>. This folder contains the configuration settings for your blog.
Edit and change the configuration file. </p>

<pre><code>nano ~/mynewblog/.blaze/config
</code></pre>

<p>Change the title, subtitle description and keywords settings to match your blog.</p>

<p><img src="img/b1.jpg" alt="Config screen shot 1" title=""></p>

<p>Now change the name and email address</p>

<p><img src="img/b1_1.jpg" alt="Config screen shot 1" title=""></p>

<p>Press the Control and o key and then Enter to save the config file. 
Press Control and x to exit.</p>

<h3>Create your first blog entry</h3>

<p>BlazeBlogger ships with a command called blaze-add, enter the command and create your first blog entry, press Control and x to save and exit the nano text editor.</p>

<p><img src="img/b1_2.jpg" alt="Config screen shot 2" title=""></p>

<p>The blaze-make command will create your website and add the blog entry. It will create your landing page called "index.html". </p>

<p>Here is the output of index.html.</p>

<p><img src="img/b1_3.jpg" alt="Config screen shot 2" title=""></p>
    ]]></description>
  </item>
</channel>
</rss>